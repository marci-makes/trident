[gcode_macro _MOVE_BASE]
# This macro moves the toolhead to the given X and Y position.
# Before moving, the macro checks that the path, in a straight line,
# does not intersect the given areas to avoid. If it does, the move
# is not executed and a warning message is given instead. 
gcode:

  # list of areas to avoid, defined by [[xmin, ymin], [xmax, ymax]]
  {% set avoid_areas = [[[0, 0], [30,60]], [[330,0], [350,50]]] %}

  {% set th = printer.toolhead %}

  {% if th.homed_axes != 'xyz' %}
    G28
  {% endif %}
  {% set x0 = th.position.x %}
  {% set y0 = th.position.y %}
  {% set z0 = th.position.z %}

  {% if z0 < 2 %}
    G0 Z2 F1200
  {% endif %}


  # make sure both x1 and y1 are defined even if they are not explicitly given
  {% if 'X' in params %}
    {% set x1 = params.X | float %}
  {% else %}
    {% set x1 = x0 %}
  {% endif %}
  
  {% if 'Y' in params %}
    {% set y1 = params.Y | float %}
  {% else %}
    {% set y1 = y0 %}
  {% endif %}
  
  {% set F = params.SPEED | default(30000) | float %}

  # unfortunately due to Jinja weirdness, using a namespace is
  # necessary to preserve the state of the variable outside of
  # the scope of the loop
  {% set ns = namespace(collision_detected = False) %}

  # M118 Toolhead: {x0}, {y0}   Target: {x1}, {y1}

  # collision checking, making sure the movement pass does not cross the avoid areas
  # using the Liang Barsky algorithm https://en.wikipedia.org/wiki/Liang%E2%80%93Barsky_algorithm
  # https://dl.acm.org/doi/pdf/10.1145/357332.357333
  {% for area in avoid_areas %}
    {% set x_min = area[0][0] %}
    {% set x_max = area[1][0] %}
    {% set y_min = area[0][1] %}
    {% set y_max = area[1][1] %}
    
    # parametrization of movement path, according to Liang-Barsky
    # check the given links for the algorithm
    {% set p1 = -(x1 - x0) %}
    {% set p2 = -p1 %}
    {% set p3 = -(y1 - y0) %}
    {% set p4 = -p3 %}

    {% set q1 = x0 - x_min %}
    {% set q2 = x_max - x0 %}
    {% set q3 = y0 - y_min %}
    {% set q4 = y_max - y0 %}

    # check if motion is parallel and does not intersect area
    # in that case, no further tests are necessary
    {% if not (((p1 == 0 and q1 < 0) or (p2 == 0 and q2 < 0) or (p3 == 0 and q3 < 0) or (p4 == 0 and q4 < 0))) %}

      {% set r_neg = 0 %}
      {% set r_pos = 1 %}   
      {% if p1 != 0 %}
        {% set r1 = q1 / p1 %}
        {% set r2 = q2 / p2 %}
        {% if p1 < 0 %}
          {% set r_neg = [r_neg, r1 ]| max %}
          {% set r_pos = [r_pos, r2 ]| min %}
        {% else %}
          {% set r_neg = [r_neg, r2 ]| max %}
          {% set r_pos = [r_pos, r1 ]| min %}
        {% endif %}
      {% endif %}
      {% if p3 != 0 %}
        {% set r3 = q3 / p3 %}
        {% set r4 = q4 / p4 %}
        {% if p3 < 0 %}
          {% set r_neg = [r_neg, r3 ]| max %}
          {% set r_pos = [r_pos, r4 ]| min %}
        {% else %}
          {% set r_neg = [r_neg, r4 ]| max %}
          {% set r_pos = [r_pos, r3 ]| min %}
        {% endif %}
      {% endif %}
      
      # If the maximum of the negative is smaller than the minimum of the positive, there is a collision
      {% if r_neg < r_pos %}
        {% set ns.collision_detected = True %}
      {% endif %}
    {% endif %}

  {% endfor %}

  
  {% if ns.collision_detected == False %}
      G0 X{x1} Y{y1} F{F}
      # M118 Moving from X{x0} Y{y0} to X{x1} Y{y1}
  {% else %}
    M117 Collision detected! Not moving!
    M118 Collision detected! Not moving!
  {% endif %}



[gcode_macro CENTER]
gcode:
  _MOVE_BASE X=175 Y=175

[gcode_macro FRONT_CENTER]
gcode:
  _MOVE_BASE X=175 Y=0

[gcode_macro FRONT_LEFT]
gcode:
  _MOVE_BASE X=40 Y=0

[gcode_macro FRONT_RIGHT]
gcode:
  _MOVE_BASE X=325 Y=0

[gcode_macro BACK_LEFT]
gcode:
  _MOVE_BASE X=0 Y=355

[gcode_macro BACK_RIGHT]
gcode:
  _MOVE_BASE X=350 Y=355

[gcode_macro BACK_CENTER]
gcode:
  _MOVE_BASE X=175 Y=355

[gcode_macro QUICK_HOME]
gcode:
  _MOVE_BASE X=340 Y=340
  G28

